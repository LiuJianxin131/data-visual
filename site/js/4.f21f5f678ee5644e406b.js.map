{"version":3,"sources":["webpack:///./FrontEnd/components/color-input-group/index.tsx","webpack:///./FrontEnd/base/color-input/index.tsx","webpack:///./FrontEnd/components/color-input/index.tsx"],"names":["ColorInputGroup","react__WEBPACK_IMPORTED_MODULE_0__","Component","[object Object]","props","super","this","handleColorComplete","bind","handleColorChange","state","colors","onColorComplete","idx","color","setState","immutability_helper__WEBPACK_IMPORTED_MODULE_1___default","$splice","nextProps","createElement","className","map","_components_color_input__WEBPACK_IMPORTED_MODULE_2__","a","disabled","key","onColorChange","defaultProps","303","e","o","304","40","t","r","i","color_input_ColorInput","react","handleColorPickerChange","handleInputChange","target","value","colorResult","hex","rgb","g","b","onColorPreviewClick","isShowColorPicker","onColorPickerChangeComplete","onInputKeyDown","colorPickerStyle","onClick","style","background","type","onKeyDown","onChange","Object","assign","lib","ChromePicker","onChangeComplete","autoPosition","position","top","zIndex","d","s","MaskStyle","left","width","height","components_color_input_ColorInput","inputRef","createRef","showColorPicker","hideColorPicker","handleInputKeyDown","handleColorPickerChangeComplete","colorPickStyle","toLocaleLowerCase","currentTarget","rect","current","getBoundingClientRect","nextState","ref","display","hidden"],"mappings":"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","file":"js/4.f21f5f678ee5644e406b.js","sourcesContent":["import * as React from 'react';\r\nimport update from 'immutability-helper';\r\nimport ColorInput from '@components/color-input';\r\n\r\ninterface IProps {\r\n  colors: string[];\r\n  disabled?: boolean;\r\n  onColorComplete: (colors: string[]) => void;\r\n}\r\n\r\ninterface IState {\r\n  colors: ReadonlyArray<string>;\r\n}\r\n\r\nexport default class ColorInputGroup extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.handleColorComplete = this.handleColorComplete.bind(this);\r\n    this.handleColorChange = this.handleColorChange.bind(this);\r\n    this.state = { colors: [] };\r\n  }\r\n\r\n  static defaultProps = {\r\n    disabled: false\r\n  };\r\n\r\n  handleColorComplete() {\r\n    this.props.onColorComplete([...this.state.colors]);\r\n  }\r\n\r\n  handleColorChange(idx: number, color: string) {\r\n    this.setState({\r\n      colors: update(this.state.colors, {\r\n        $splice: [[idx, 1, color]]\r\n      })\r\n    });\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps: IProps) {\r\n    return { colors: nextProps.colors };\r\n  }\r\n\r\n  render() {\r\n    const { colors } = this.state;\r\n    return (\r\n      <div className='color_input_group'>\r\n        {colors.map((color, idx) => {\r\n          return (\r\n            <ColorInput disabled={this.props.disabled} key={idx} color={color} onColorChange={(color) => this.handleColorChange(idx, color)}\r\n              onColorComplete={this.handleColorComplete} >\r\n            </ColorInput>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}","import * as React from 'react';\r\nimport { ChromePicker, ColorResult } from 'react-color';\r\nimport './style.styl';\r\n\r\ninterface IProps {\r\n  color: string;\r\n  disabled?: boolean;\r\n  colorPickerStyle?: React.CSSProperties;\r\n  isShowColorPicker?: boolean;\r\n  onColorChange?: (color: string) => void;\r\n  onColorPreviewClick?: () => void;\r\n  onColorPickerChangeComplete?: (colorResult: ColorResult) => void;\r\n  onInputKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nexport default class ColorInput extends React.Component<IProps, undefined> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.handleColorPickerChange = this.handleColorPickerChange.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n  }\r\n\r\n  static defaultProps = {\r\n    isShowColorPicker: false,\r\n    disabled: false,\r\n    autoPosition: false,\r\n    colorPickerStyle: {\r\n      position: 'relative',\r\n      top: '10px',\r\n      zIndex: 1\r\n    }\r\n  };\r\n\r\n  handleInputChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    this.props.onColorChange(e.target.value);\r\n  }\r\n\r\n  handleColorPickerChange(colorResult: ColorResult) {\r\n    let color = colorResult.hex;\r\n    if (colorResult.rgb.a !== 1) {\r\n      const { r, g, b, a } = colorResult.rgb;\r\n      color = `rgba(${r},${g},${b},${a})`;\r\n    }\r\n    this.props.onColorChange(color);\r\n  }\r\n\r\n  render() {\r\n    const { color } = this.props;\r\n    const { onColorPreviewClick, isShowColorPicker, onColorPickerChangeComplete, onInputKeyDown, disabled, colorPickerStyle } = this.props;\r\n    return (\r\n      <div className={`color_input_wrapper ${disabled && 'color_input_wrapper_disable'}`}>\r\n        <div className='color_preview_wrapper' onClick={onColorPreviewClick} >\r\n          <span style={{ background: color }} className='color_preview'></span>\r\n        </div>\r\n        <input disabled={disabled} type='text' className='color_input' value={color} onKeyDown={onInputKeyDown} onChange={this.handleInputChange} />\r\n        <div className='color_colorpicker' style={{ ...colorPickerStyle }}>\r\n          {isShowColorPicker && !disabled && <ChromePicker color={color} onChangeComplete={onColorPickerChangeComplete} onChange={this.handleColorPickerChange} />}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import * as React from 'react';\r\nimport RawInputColor from '@base/color-input';\r\nimport { ColorResult } from 'react-color';\r\n\r\nimport './style.styl';\r\n\r\ninterface IProps {\r\n  color: string;\r\n  disabled?: boolean;\r\n  onColorChange: (color: string) => void;\r\n  onColorComplete: (color: string) => void;\r\n}\r\n\r\ninterface IState {\r\n  isShowColorPicker: boolean;\r\n  colorPickStyle: React.CSSProperties;\r\n}\r\n\r\nconst MaskStyle = {\r\n  position: 'fixed' as 'fixed',\r\n  left: 0,\r\n  top: 0,\r\n  zIndex: 1,\r\n  width: '100%',\r\n  height: '100%'\r\n};\r\n\r\nexport default class ColorInput extends React.Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n    this.showColorPicker = this.showColorPicker.bind(this);\r\n    this.hideColorPicker = this.hideColorPicker.bind(this);\r\n    this.handleInputKeyDown = this.handleInputKeyDown.bind(this);\r\n    this.handleColorPickerChangeComplete = this.handleColorPickerChangeComplete.bind(this);\r\n\r\n    this.state = {\r\n      isShowColorPicker: false,\r\n      colorPickStyle: {}\r\n    };\r\n  }\r\n\r\n  inputRef: React.RefObject<HTMLDivElement> = React.createRef();\r\n\r\n  static defaultProps = {\r\n    disabled: false\r\n  };\r\n\r\n  handleColorPickerChangeComplete(colorResult: ColorResult) {\r\n    const { r, g, b, a } = colorResult.rgb;\r\n    const color = `rgba(${r},${g},${b},${a})`;\r\n    this.props.onColorComplete(color);\r\n  }\r\n\r\n  handleInputKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\r\n    e.key.toLocaleLowerCase() === 'enter' && this.props.onColorComplete(e.currentTarget.value);\r\n  }\r\n\r\n  showColorPicker() {\r\n    if (this.props.disabled) return;\r\n    let rect = this.inputRef.current.getBoundingClientRect();\r\n    this.setState({\r\n      isShowColorPicker: true,\r\n      colorPickStyle: {\r\n        zIndex: 1,\r\n        position: 'fixed',\r\n        top: rect.top + 25,\r\n        left: rect.left - 200\r\n      }\r\n    });\r\n  }\r\n\r\n  hideColorPicker() {\r\n    this.setState({ isShowColorPicker: false });\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: IProps, nextState: IState) {\r\n    return this.props.disabled !== nextProps.disabled || this.props.color !== nextProps.color || this.state.isShowColorPicker !== nextState.isShowColorPicker;\r\n  }\r\n\r\n  render() {\r\n    const { color, onColorChange, disabled } = this.props;\r\n    const { isShowColorPicker, colorPickStyle } = this.state;\r\n    return (\r\n      <div ref={this.inputRef} style={{ display: 'inline-block' }}>\r\n        <div className='color_mask' onClick={this.hideColorPicker} hidden={!isShowColorPicker} style={{ ...MaskStyle }}></div>\r\n        <RawInputColor colorPickerStyle={colorPickStyle} disabled={disabled} onColorChange={onColorChange} onInputKeyDown={this.handleInputKeyDown} onColorPickerChangeComplete={this.handleColorPickerChangeComplete} style={{ position: 'relative' }}\r\n          isShowColorPicker={isShowColorPicker} onColorPreviewClick={this.showColorPicker} color={color} >\r\n        </RawInputColor>\r\n      </div>\r\n    );\r\n  }\r\n}"],"sourceRoot":""}